INIT: including
	[  ]	create an empty object
	[  ]	use the value of an object's property to make a custom  
			animation (width)
	[  ]	use the value of an object's property to make a custom
			animation duration
	[  ]	pass an object to a function as a parameter/argument

PROCESS: including
	[  ]	create a function that accepts an object 
			as an argument/parameter
	[  ]	set a delay using setTimeout() or setInterval
	[  ]	use an anonymous function inside setTimeout() or setInterval
	[  ]	use string addition (for example: width + "px")
	[  ]	processes at least 5 characteristics
OUTPUT: including
	[  ]	display information using .innerHTML
	[  ]	animate a change in the width of an element
	[  ]	animate using a custom duration
	[  ]	animate a fade in of an element
	[  ]	animate a fade out of an element
STYLE: including
	[  ]	honour all previous //STYLE sections
	[  ]	use descriptive variable names
	[  ]	break up functions into separate ones for input, processing, 
			and output
	[  ]	uses descriptive comments to identify and describe each function, 
			for example: 
			//PROCESS: 	this function accepts distanceUp and 
						animates the image up that number of pixels
	[  ]	add spaces between mathematical operators, 
			for example: var exampleVar = 3 + 4, not var exampleVar=3+4.

STEP BY STEP:
0. 	As you create each function, add a descriptive comment, and add a 
	console.log to help you troubleshoot.
	
1.	Create a PROCESS function ( generateCharacterStats ??) that will create 
	an empty object and randomly assign numbers to at least five 
	characteristics. This function should return this object at the end of 
	the function. Add it to the start of your mainProcedure.
	
2. 	Create an OUTPUT function ( displayStatistics ??) that will accept the 
	character object as a parameter and display its properties inside the 
	appropriate ScoreIDs. Add this next to your mainProcedure.
	
3. 	Create an OUTPUT function ( animateStatistics ??) that will accept the
	character object as a parameter/argument and then use that information
	to animate the graph. 
	
	a)	First get the graph animating in to opacity: 1.
	b)	Then get it animating the width of the right GraphID
	c) 	Then make the duration of the animation depend on the ability score
	d)	Lastly, use setTimeout to make the animations trigger in a sequence
		Use an anonymous function in the timer to make it work, like this: 
		
			setTimeout( function () {
					//animation commands go here
				}, 200
			);
	
4. 	Create an OUTPUT function ( fadeGraphAway ??) that will animate 
	shrinking the graphs backward
	a) 	First get it so each GraphID animates back to zero width
	b)	Then get it so that it also fades out to opacity: 0

	Then add this to mainProcedure, putting it in before 
	generateCharacterStats